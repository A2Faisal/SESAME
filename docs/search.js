window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "sesame.sesametoolbox", "modulename": "sesame.sesametoolbox", "kind": "module", "doc": "<p>SESAME is an open-source Python tool designed to make spatial data analysis, visualization, and exploration accessible to all.<br />\nWhether you\u2019re a researcher, student, or enthusiast, SESAME helps you unlock insights from geospatial data with just a few lines of code.</p>\n\n<hr />\n\n<p><strong>What can you do with the SESAME toolbox?</strong></p>\n\n<ul>\n<li>Conveniently process and analyze both spatial datasets (e.g. GeoTIFFs) and tabular jurisdictional data (e.g. csv files by country) through a unified set of tools.</li>\n<li>Generate standardized netcdf files from a wide range of spatial input types (e.g. lines, points, polygons)</li>\n<li>Create publication-ready maps and plots.</li>\n<li>Explore spatial and temporal patterns among hundreds of variables in the Human-Earth Atlas.</li>\n</ul>\n\n<p><strong>Getting Started with the Human-Earth Atlas:</strong></p>\n\n<ol>\n<li>Install SESAME*</li>\n<li>Download the Human-Earth Atlas (<a href=\"https://doi.org/10.6084/m9.figshare.28432499\">Figshare Link</a>)</li>\n<li>Load your spatial data (e.g., land cover, population, climate)</li>\n<li>Use SESAME\u2019s plotting tools to visualize and compare datasets</li>\n<li>Explore the Human-Earth Atlas by overlaying your data with global reference layers</li>\n</ol>\n\n<p>*Note: SESAME may take up to 2 minutes to load when used for the first time. This will not recur with further use.</p>\n\n<p><strong>Navigating the Atlas:</strong></p>\n\n<ol>\n<li>List the netCDF files in the\u201cHuman\u2013Earth Atlas\u201d</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sesame</span> <span class=\"k\">as</span> <span class=\"nn\">ssm</span>\n<span class=\"n\">ssm</span><span class=\"o\">.</span><span class=\"n\">atlas</span><span class=\"p\">(</span><span class=\"n\">directory</span><span class=\"o\">=</span><span class=\"n\">atlas</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p><img src=\"images/atlas.png\" width=400\"></p>\n\n<ol start=\"2\">\n<li>View dataset metadata</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">ssm</span><span class=\"o\">.</span><span class=\"n\">list_variables</span><span class=\"p\">(</span><span class=\"s2\">&quot;atlas/B.land.cover.2001-2023.a.nc&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p><img src=\"images/info.png\" width=\"400\"></p>\n\n<ol start=\"3\">\n<li>Visualize data on the map</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Load data</span>\n<span class=\"n\">netcdf_file</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;atlas/T.transportation.roads.nc&quot;</span>\n<span class=\"n\">ssm</span><span class=\"o\">.</span><span class=\"n\">plot_map</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"n\">netcdf_file</span><span class=\"p\">,</span><span class=\"n\">variable</span><span class=\"o\">=</span><span class=\"s2\">&quot;roads_gross&quot;</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;magma_r&#39;</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Gross Road Mass&#39;</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;g m-2&#39;</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mf\">1e4</span><span class=\"p\">,</span> <span class=\"n\">extend_max</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p><img src=\"images/gross_road.png\" alt=\"Gross Road Mass Map\" width=\"400\"/></p>\n\n<ol start=\"4\">\n<li>Quick mathematical operation</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Load data</span>\n<span class=\"n\">netcdf_file</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;atlas/T.transportation.roads.nc&quot;</span>\n<span class=\"c1\"># Perform the operation</span>\n<span class=\"n\">ssm</span><span class=\"o\">.</span><span class=\"n\">divide_variables</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"n\">netcdf_file</span><span class=\"p\">,</span> <span class=\"n\">variable1</span><span class=\"o\">=</span><span class=\"s2\">&quot;road_length&quot;</span><span class=\"p\">,</span> <span class=\"n\">variable2</span><span class=\"o\">=</span><span class=\"s2\">&quot;grid_area&quot;</span><span class=\"p\">,</span> <span class=\"n\">new_variable_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;road_density&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Ready to get started? Dive into the function docs below or read <a href=\"https://www.nature.com/articles/s41597-025-05087-5\">The SESAME Human-Earth Atlas</a> paper for inspiration!</p>\n\n<hr />\n"}, {"fullname": "sesame.sesametoolbox.point_2_grid", "modulename": "sesame.sesametoolbox", "qualname": "point_2_grid", "kind": "function", "doc": "<p>Converts point data from a shapefile or GeoDataFrame into a gridded netCDF dataset.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li>point_data : GeoDataFrame or str. Input point data to be gridded. Can be either a GeoDataFrame or a path to a point shapefile (.shp).</li>\n<li>variable_name : str, optional. Name of the variable to include in the netCDF attributes metadata. Defaults to:\n<ul>\n<li>The unique entries in the <code>attr_field</code> column if specified.</li>\n<li>The input filename without extension if <code>attr_field</code> and <code>variable_name</code> are not specified.</li>\n</ul></li>\n<li>long_name : str, optional. A descriptive name for the variable, added to the netCDF metadata. Behaves the same as <code>variable_name</code> if\n<code>attr_field</code> is specified. Defaults to the input filename without extension if unspecified.</li>\n<li>units : str, optional. Units of the data variable to include in the netCDF metadata. Default is \"value/grid-cell\".</li>\n<li>source : str, optional. String describing the original source of the input data. This will be added to the netCDF metadata.</li>\n<li>time : str, optional. Time dimension for the output netCDF. If specified, the output will include a time dimension with the\nvalue provided. Default is None (spatial, 2D netCDF output).</li>\n<li>resolution : float, optional. Desired resolution for the grid cells in the output dataset. Default is 1 degree.</li>\n<li>agg_column : str, optional. Column name in the shapefile or GeoDataFrame specifying the values to aggregate in each grid cell.\nDefaults to counting the number of points per grid cell.</li>\n<li>agg_function : str, optional. Aggregation method for combining values in each grid cell. Options include:\n<ul>\n<li>'sum' (default): Sums all point values.</li>\n<li>'max': Takes the maximum value.</li>\n<li>'min': Takes the minimum value.</li>\n<li>'std': Computes the standard deviation.</li>\n</ul></li>\n<li>attr_field : str, optional. Column name in the shapefile or GeoDataFrame specifying the variable names for multiple data types.</li>\n<li>output_directory : str, optional. Directory where the output NetCDF file will be saved. If None, but output_filename is True, the file will be saved in the current working directory.</li>\n<li>output_filename : str, optional. Name of the output NetCDF file (without the <code>.nc</code> extension). If not provided:\n<ul>\n<li>Uses the input shapefile name if a shapefile path is given.</li>\n<li>Saves as <code>\"gridded_points.nc\"</code> if a GeoDataFrame is provided as input.</li>\n</ul></li>\n<li>normalize_by_area : bool, optional. If True, normalizes the grid values by area (e.g., converts to value per square meter). Default is False.</li>\n<li>zero_is_value : bool, optional. If True, treats zero values as valid data rather than as no-data. Default is False.</li>\n<li>verbose : bool, optional. If True, prints information about the process, such as global sum of values before and after gridding. Default is False.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li>xarray.Dataset. Transformed dataset with gridded data derived from the input point data.</li>\n</ul>\n\n<h2 id=\"notes\">Notes</h2>\n\n<ul>\n<li>The function supports input in the form of a shapefile or GeoDataFrame containing point data.</li>\n<li>If points lie exactly on a grid boundary, they are shifted by 0.0001 degrees in both latitude and longitude to ensure assignment to a grid cell.</li>\n<li>The function creates a netCDF file, where data variables are aggregated based on the <code>agg_column</code> and <code>agg_function</code>.</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">point_2_grid</span><span class=\"p\">(</span><span class=\"n\">point_data</span><span class=\"o\">=</span><span class=\"n\">shapefile_path</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">variable_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;airplanes&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">long_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Airplanes Count&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s2\">&quot;airport/grid-cell&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s2\">&quot;CIA&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">point_data</span>,</span><span class=\"param\">\t<span class=\"n\">variable_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;variable&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">long_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;variable&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">&#39;value/grid-cell&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">agg_column</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg_function</span><span class=\"o\">=</span><span class=\"s1\">&#39;sum&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">attr_field</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_directory</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">normalize_by_area</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">zero_is_value</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.line_2_grid", "modulename": "sesame.sesametoolbox", "qualname": "line_2_grid", "kind": "function", "doc": "<p>Converts line data from a shapefile or GeoDataFrame into a gridded netCDF dataset.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li>line_data : GeoDataFrame or str. Input lines data to be gridded. Can be either a GeoDataFrame or a path to a line/polyline shapefile (.shp).</li>\n<li>variable_name : str, optional. Name of the variable to include in the netCDF attributes metadata. Defaults to:\n<ul>\n<li>The unique entries in the <code>attr_field</code> column if specified.</li>\n<li>The input filename without extension if <code>attr_field</code> and <code>variable_name</code> are not specified.</li>\n</ul></li>\n<li>long_name : str, optional. A descriptive name for the variable, added to the netCDF metadata. Behaves the same as <code>variable_name</code> if\n<code>attr_field</code> is specified. Defaults to the input filename without extension if unspecified.</li>\n<li>units : str, optional. Units of the data variable to include in the netCDF metadata. Default is \"meter/grid-cell\".</li>\n<li>source : str, optional. String describing the original source of the input data. This will be added to the netCDF metadata.</li>\n<li>time : str, optional. Time dimension for the output netCDF. If specified, the output will include a time dimension with the\nvalue provided. Default is None (spatial, 2D netCDF output).</li>\n<li>resolution : float, optional. Desired resolution for the grid cells in the output dataset. Default is 1 degree.</li>\n<li>agg_column : str, optional. Column name in the shapefile or GeoDataFrame specifying the values to aggregate in each grid cell.\nDefaults to summing the lengths of intersected lines per grid cell.</li>\n<li>agg_function : str, optional. Aggregation method for combining values in each grid cell. Options include:\n<ul>\n<li>'sum' (default): Sums all line values.</li>\n<li>'max': Takes the maximum value.</li>\n<li>'min': Takes the minimum value.</li>\n<li>'std': Computes the standard deviation.</li>\n</ul></li>\n<li>attr_field : str, optional. Column name in the shapefile or GeoDataFrame specifying the variable names for multiple data types.</li>\n<li>output_directory : str, optional. Directory where the output NetCDF file will be saved. If None, but output_filename is True, the file will be saved in the current working directory.</li>\n<li>output_filename : str, optional. Name of the output NetCDF file (without the <code>.nc</code> extension). If not provided:\n<ul>\n<li>Uses the input shapefile name if a shapefile path is given.</li>\n<li>Saves as <code>\"gridded_lines.nc\"</code> if a GeoDataFrame is provided as input.</li>\n</ul></li>\n<li>normalize_by_area : bool, optional. If True, normalizes the variable in each grid cell by the area of the grid cell (e.g., converts to value per square meter). Default is False.</li>\n<li>zero_is_value : bool, optional.   If True, treats zero values as valid data rather than as no-data. Default is False.\nIf True, treats zero values as valid data rather than as no-data. Default is False.</li>\n<li>verbose : bool, optional. If True, prints information about the process, such as global sum of values before and after gridding. Default is False.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li>xarray.Dataset. Transformed dataset with gridded data derived from the input line data.</li>\n</ul>\n\n<h2 id=\"notes\">Notes</h2>\n\n<ul>\n<li>The function supports input in the form of a shapefile or GeoDataFrame containing line data.</li>\n<li>Line lengths are calculated and aggregated based on the specified <code>agg_column</code> and <code>agg_function</code>.</li>\n<li>If lines intersect a grid boundary, their contributions are divided proportionally among the intersected grid cells.</li>\n<li>The function creates a netCDF file, where data variables are aggregated and stored with metadata.</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">line_2_grid</span><span class=\"p\">(</span><span class=\"n\">line_data</span><span class=\"o\">=</span><span class=\"n\">shapefile_path</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">variable_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;roads&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">long_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Roads Length&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s2\">&quot;meter/grid-cell&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s2\">&quot;OpenStreetMap&quot;</span><span class=\"p\">,</span>  \n<span class=\"gp\">... </span>            <span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"n\">agg_function</span><span class=\"o\">=</span><span class=\"s2\">&quot;sum&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">line_data</span>,</span><span class=\"param\">\t<span class=\"n\">variable_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;variable&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">long_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;variable&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">&#39;meter/grid-cell&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">agg_column</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg_function</span><span class=\"o\">=</span><span class=\"s1\">&#39;sum&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">attr_field</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_directory</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">normalize_by_area</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">zero_is_value</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.poly_2_grid", "modulename": "sesame.sesametoolbox", "qualname": "poly_2_grid", "kind": "function", "doc": "<p>Converts polygon data from a shapefile or GeoDataFrame into a gridded netCDF dataset.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li>polygon_data : GeoDataFrame or str. Input polygons data to be gridded. Can be either a GeoDataFrame or a path to a polygons shapefile (.shp).</li>\n<li>variable_name : str, optional. Name of the variable to include in the netCDF attributes metadata. Defaults to:\n<ul>\n<li>The unique entries in the <code>attr_field</code> column if specified.</li>\n<li>The input filename without extension if <code>attr_field</code> and <code>variable_name</code> are not specified.</li>\n</ul></li>\n<li>long_name : str, optional. A descriptive name for the variable, added to the netCDF metadata. Behaves the same as <code>variable_name</code> if\n<code>attr_field</code> is specified. Defaults to the input filename without extension if unspecified.</li>\n<li>units : str, optional. Units of the data variable to include in the netCDF metadata. Default is \"m2/grid-cell\".</li>\n<li>source : str, optional. String describing the original source of the input data. This will be added to the netCDF metadata.</li>\n<li>time : str, optional. Time dimension for the output netCDF. If specified, the output will include a time dimension with the\nvalue provided. Default is None (spatial, 2D netCDF output).</li>\n<li>resolution : float, optional. Desired resolution for the grid cells in the output dataset. Default is 1 degree.</li>\n<li>attr_field : str, optional. Column name in the shapefile or GeoDataFrame specifying the variable names for multiple data types.</li>\n<li>fraction : bool, optional. If True, calculates the fraction of each polygon within each grid cell. The output values will range from 0 to 1. Default is False.</li>\n<li>agg_function : str, optional. Aggregation method for combining values in each grid cell. Default is 'sum'. Options include:\n<ul>\n<li>'sum': Sum of values.</li>\n<li>'max': Maximum value.</li>\n<li>'min': Minimum value.</li>\n<li>'std': Standard deviation.</li>\n</ul></li>\n<li>output_directory : str, optional. Directory where the output NetCDF file will be saved. If None, but output_filename is True, the file will be saved in the current working directory.</li>\n<li>output_filename : str, optional. Name of the output NetCDF file (without the <code>.nc</code> extension). If not provided:\n<ul>\n<li>Uses the input shapefile name if a shapefile path is given.</li>\n<li>Saves as <code>\"gridded_polygons.nc\"</code> if a GeoDataFrame is provided as input.</li>\n</ul></li>\n<li>normalize_by_area : bool, optional. If True, normalizes the grid values by area (e.g., converts to value per square meter). Default is False.</li>\n<li>zero_is_value : bool, optional. If True, treats zero values as valid data rather than as no-data. Default is False.</li>\n<li>verbose : bool, optional. If True, prints information about the process, such as global sum of values before and after gridding. Default is False.    </li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li>xarray.Dataset. Transformed dataset with gridded data derived from the input polygon data.</li>\n</ul>\n\n<h2 id=\"notes\">Notes</h2>\n\n<ul>\n<li>The function supports input in the form of a shapefile or GeoDataFrame containing polygon data.</li>\n<li>Polygon areas are calculated and aggregated based on the specified <code>attr_field</code> and <code>agg_function</code>.</li>\n<li>If the <code>fraction</code> parameter is True, the fraction of each polygon in each grid cell will be computed, with values ranging from 0 to 1.</li>\n<li>The function creates a netCDF file, where data variables are aggregated and stored with metadata.</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">poly_2_grid</span><span class=\"p\">(</span><span class=\"n\">polygon_data</span><span class=\"o\">=</span><span class=\"n\">shapefile_path</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s2\">&quot;fraction&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s2\">&quot;The new global lithological map database GLiM&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">attr_field</span><span class=\"o\">=</span><span class=\"s2\">&quot;Short_Name&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">fraction</span><span class=\"o\">=</span><span class=\"s2\">&quot;yes&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">polygon_data</span>,</span><span class=\"param\">\t<span class=\"n\">variable_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;variable&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">long_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;variable&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">&#39;m2/grid-cell&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">attr_field</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fraction</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">agg_function</span><span class=\"o\">=</span><span class=\"s1\">&#39;sum&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_directory</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">normalize_by_area</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">zero_is_value</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.grid_2_grid", "modulename": "sesame.sesametoolbox", "qualname": "grid_2_grid", "kind": "function", "doc": "<p>Converts raster data (TIFF or netCDF) into a re-gridded xarray dataset.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li>raster_data : str. Path to the input raster data file. This can be a string path to a TIFF (.tif) file, a string path to a NetCDF (.nc or .nc4) file or An already loaded xarray.Dataset object.\n<ul>\n<li>If <code>raster_data</code> is a NetCDF file or an xarray.Dataset, the <code>netcdf_variable</code> parameter must also be provided to specify which variable to extract.</li>\n</ul></li>\n<li>agg_function : str. Aggregation method to apply when re-gridding. Supported values are 'SUM', 'MEAN', or 'MAX'.</li>\n<li>variable_name : str. Name of the variable to include in the output dataset.</li>\n<li>long_name : str. Descriptive name for the variable.</li>\n<li>units : str, optional. Units for the variable. Default is \"value/grid-cell\".</li>\n<li>source : str, optional. Source information for the dataset. Default is None.</li>\n<li>time : str or None, optional. Time stamp or identifier for the data. Default is None.</li>\n<li>resolution : int or float, optional. Desired resolution of the grid cells in degree in the output dataset. Default is 1.</li>\n<li>netcdf_variable : str, optional. Name of the variable to extract from the netCDF file, if applicable. Required for netCDF inputs.</li>\n<li>output_directory : str, optional. Directory where the output NetCDF file will be saved. If None, but output_filename is True, the file will be saved in the current working directory.</li>\n<li>output_filename : str, optional. Name of the output NetCDF file (without the <code>.nc</code> extension). If not provided:\n<ul>\n<li>Uses <code>variable_name</code> if it is specified.</li>\n<li>Defaults to <code>regridded.nc</code> if none of the above are provided.</li>\n</ul></li>\n<li>padding : str, optional. Padding strategy ('symmetric' or 'end').</li>\n<li>zero_is_value : bool, optional. Whether to treat zero values as valid data rather than as no-data. Default is False.</li>\n<li>normalize_by_area : bool, optional. Whether to normalize grid values by area (e.g., convert to value per square meter). Default is False.</li>\n<li>verbose : bool, optional. If True, prints the global sum of values before and after re-gridding. Default is False.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li>xarray.Dataset. Re-gridded xarray dataset containing the processed raster data.</li>\n</ul>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This function supports raster data in TIFF or netCDF format and performs re-gridding based on \nthe specified <code>agg_function</code>. The output dataset will include metadata such as the variable name, \nlong name, units, and optional source and time information.</p>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">grid_2_grid</span><span class=\"p\">(</span><span class=\"n\">raster_path</span><span class=\"o\">=</span><span class=\"n\">pop_path</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">agg_function</span><span class=\"o\">=</span><span class=\"s2\">&quot;sum&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">variable_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;population_count&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">long_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Total Population&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s2\">&quot;people per grid&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s2\">&quot;WorldPop&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"s2\">&quot;2020-01-01&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"s2\">&quot;yes&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">raster_data</span>,</span><span class=\"param\">\t<span class=\"n\">agg_function</span>,</span><span class=\"param\">\t<span class=\"n\">variable_name</span>,</span><span class=\"param\">\t<span class=\"n\">long_name</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">&#39;value/grid-cell&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">netcdf_variable</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_directory</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"s1\">&#39;symmetric&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">zero_is_value</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">normalize_by_area</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.table_2_grid", "modulename": "sesame.sesametoolbox", "qualname": "table_2_grid", "kind": "function", "doc": "<p>Convert tabular data to a gridded dataset by spatially distributing values based on a NetCDF variable and a tabular column.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<ul>\n<li>surrogate_data : xarray.Dataset or str. xarray dataset or a path to a NetCDF file. If a file path is provided, it will be automatically loaded \ninto an xarray.Dataset. The dataset must include the variable specified in <code>surrogate_variable</code>.</li>\n<li>surrogate_variable : str. Variable name in the NetCDF or xarray dataset used for spatial distribution.</li>\n<li>tabular_data : pandas.DataFrame or str. Tabular dataset as a pandas DataFrame or a path to a CSV file. If a file path is provided, it will be \nautomatically loaded into a DataFrame. The data must include a column named \"ISO3\" representing country codes. \nIf not present, use the <code>add_iso3_column</code> utility function to convert country names to ISO3 codes.     </li>\n<li>tabular_column : str. Column name in the tabular dataset with values to be spatially distributed.</li>\n<li>variable_name : str, optional. Name of the variable. Default is None.</li>\n<li>long_name : str, optional. A long name for the variable. Default is None.</li>\n<li>units : str, optional. Units of the variable. Default is 'value/grid'.</li>\n<li>source : str, optional. Source information, if available. Default is None.</li>\n<li>time : str, optional. Time information for the dataset.</li>\n<li>output_directory : str, optional. Directory where the output NetCDF file will be saved. If None, but output_filename is True, the file will be saved in the current working directory.</li>\n<li>output_filename : str, optional. Name of the output NetCDF file (without the <code>.nc</code> extension). If not provided:\n<ul>\n<li>Uses <code>variable_name</code> if it is specified.</li>\n<li>Falls back to <code>long_name</code> or <code>tabular_column</code> if <code>variable_name</code> is not given.</li>\n<li>Defaults to <code>gridded_table.nc</code> if none of the above are provided.</li>\n</ul></li>\n<li>zero_is_value: bool, optional. If the value is True, then the function will treat zero as an existent value and 0 values will be considered while calculating mean and STD.</li>\n<li>normalize_by_area : bool, optional. Whether to normalize grid values by area (e.g., convert to value per square meter). Default is False.</li>\n<li>eez : bool, optional. If set to True, the function converts the jurisdictional Exclusive Economic Zone (EEZ) values to a spatial grid.</li>\n<li>verbose: bool, optional. If True, the global gridded sum of before and after re-gridding operation will be printed. If any jurisdiction where surrogate variable is missing and tabular data is evenly distributed over the jurisdiction, the ISO3 codes of evenly distributed countries will also be printed.</li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li>xarray.Dataset. Resulting gridded dataset after spatial distribution of tabular values.</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">table_2_grid</span><span class=\"p\">(</span><span class=\"n\">surrogate_data</span><span class=\"o\">=</span><span class=\"n\">netcdf_file_path</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">surrogate_variable</span><span class=\"o\">=</span><span class=\"s2\">&quot;railway_length&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">tabular_data</span><span class=\"o\">=</span><span class=\"n\">csv_file_path</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">tabular_column</span><span class=\"o\">=</span><span class=\"s2\">&quot;steel&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">variable_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;railtract_steel&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">long_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&#39;Railtrack Steel Mass&#39;&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s2\">&quot;g m-2&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s2\">&quot;Matitia (2022)&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">normalize_by_area</span><span class=\"o\">=</span><span class=\"s2\">&quot;yes&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"s2\">&quot;yes&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">surrogate_data</span>,</span><span class=\"param\">\t<span class=\"n\">surrogate_variable</span>,</span><span class=\"param\">\t<span class=\"n\">tabular_data</span>,</span><span class=\"param\">\t<span class=\"n\">tabular_column</span>,</span><span class=\"param\">\t<span class=\"n\">variable_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">long_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">&#39;value/grid-cell&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_directory</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zero_is_value</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">normalize_by_area</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">eez</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.grid_2_table", "modulename": "sesame.sesametoolbox", "qualname": "grid_2_table", "kind": "function", "doc": "<p>Process gridded data from an xarray Dataset to generate tabular data for different jurisdictions.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<ul>\n<li>grid_data : xarray.Dataset or str. xarray dataset or a path to a NetCDF file. If a file path is provided, it will be automatically loaded into an xarray.Dataset.</li>\n<li>variables : str, optional. Variables name to be processed. It can either be one variable or list of variables. If None, all variables in the dataset (excluding predefined ones) will be considered.</li>\n<li>time : str, optional. Time slice for data processing. If provided, the nearest time slice is selected. If None, a default time slice is used.</li>\n<li>resolution : float, optional. Resolution of gridded data in degree. Default is 1 degree.</li>\n<li>grid_area : str, optional. Indicator to consider grid area during processing. If 'YES', the variable is multiplied by grid area.</li>\n<li>aggregation : str, optional. Aggregation level for tabular data. If 'continent', the data will be aggregated at the continent level.</li>\n<li>agg_function : str, optional, default 'sum'. Aggregation method. Options: 'sum', 'mean', 'max', 'min', 'std'.  </li>\n<li>verbose : bool, optional. If True, the function will print the global sum of values before and after aggregation.</li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>df : pandas DataFrame. Tabular data for different jurisdictions, including ISO3 codes, variable values, and optional 'Year' column.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grid_data</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">grid_area</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">aggregation</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg_function</span><span class=\"o\">=</span><span class=\"s1\">&#39;sum&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.add_iso3_column", "modulename": "sesame.sesametoolbox", "qualname": "add_iso3_column", "kind": "function", "doc": "<p>Convert country names in a DataFrame column to their corresponding ISO3 country codes.</p>\n\n<p>This function reads a JSON file containing country names and their corresponding ISO3 codes, then \nmaps the values from the specified column in the DataFrame to their ISO3 codes based on the JSON data. \nThe resulting ISO3 codes are added as a new column named 'ISO3'.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li>df (pandas.DataFrame): The DataFrame containing a column with country names.</li>\n<li>column (str): The name of the column in the DataFrame that contains country names.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li>pandas.DataFrame: The original DataFrame with an additional 'ISO3' column containing the ISO3 country codes.</li>\n</ul>\n\n<h2 id=\"raises\">Raises:</h2>\n\n<ul>\n<li>FileNotFoundError: If the JSON file containing country mappings cannot be found.</li>\n<li>KeyError: If the specified column is not present in the DataFrame.</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">add_iso3_column</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">=</span><span class=\"n\">dataframe</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>               <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s2\">&quot;Country&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">column</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.plot_histogram", "modulename": "sesame.sesametoolbox", "qualname": "plot_histogram", "kind": "function", "doc": "<p>Create a histogram for an array variable in an xarray dataset.\nOptionally remove outliers and apply log transformations.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>dataset : xarray.Dataset or str, xarray dataset or a path to a NetCDF file. If a file path is provided, it will be automatically loaded into an xarray.Dataset.</li>\n<li>variable: str, the name of the variable to plot.</li>\n<li>time: str, optional, the time slice to plot.</li>\n<li>bin_size: int, optional, the number of bins in the histogram.</li>\n<li>color: str, optional, the color of the histogram bars.</li>\n<li>plot_title: str, optional, the title for the plot.</li>\n<li>x_label: str, optional, the label for the x-axis.</li>\n<li>remove_outliers: bool, optional, whether to remove outliers.</li>\n<li>log_transform: str, optional, the type of log transformation ('log10', 'log', 'log2').</li>\n<li>output_dir : str, optional, Directory path to save the output figure. If not provided, the figure is saved in the current working directory.</li>\n<li>filename : str, optional, Filename (with extension) for saving the figure. If not provided, the plot is saved as \"output_histogram.png\".</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>None, displays the plot and optionally saves it to a file.</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">plot_histogram</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"n\">dataset</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>               <span class=\"n\">variable</span><span class=\"o\">=</span><span class=\"s2\">&quot;railway_length&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>               <span class=\"n\">bin_size</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>               <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;blue&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>               <span class=\"n\">plot_title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Histogram of Railway Length&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataset</span>,</span><span class=\"param\">\t<span class=\"n\">variable</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bin_size</span><span class=\"o\">=</span><span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;blue&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">plot_title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">remove_outliers</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">log_transform</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.plot_scatter", "modulename": "sesame.sesametoolbox", "qualname": "plot_scatter", "kind": "function", "doc": "<p>Create a scatter plot for two variables in an xarray dataset.\nOptionally remove outliers and apply log transformations.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>variable1 : str, name of the variable to be plotted on the x-axis. Must be present in <code>dataset</code>.</li>\n<li>variable2 : str, name of the variable to be plotted on the y-axis. If <code>dataset2</code> is provided, this variable will be extracted from <code>dataset2</code>; otherwise, it must exist in <code>dataset</code>.</li>\n<li>dataset : xarray.Dataset or str, the primary dataset or a path to a NetCDF file. This dataset must contain the variable specified by <code>variable1</code>, which will be used for the x-axis.</li>\n<li>dataset2 : xarray.Dataset or str, optional, a second dataset or a path to a NetCDF file containing the variable specified by <code>variable2</code> (for the y-axis). If not provided, <code>dataset</code> will be used for both variables.</li>\n<li>time: str, optional, the time slice to plot.</li>\n<li>color: str, optional, the color map of the scatter plot.</li>\n<li>x_label: str, optional, the label for the x-axis.</li>\n<li>y_label: str, optional, the label for the y-axis.</li>\n<li>plot_title: str, optional, the title for the plot.</li>\n<li>remove_outliers: bool, optional, whether to remove outliers from the data.</li>\n<li>log_transform_1: str, optional, the type of log transformation for variable1 ('log10', 'log', 'log2').</li>\n<li>log_transform_2: str, optional, the type of log transformation for variable2 ('log10', 'log', 'log2').</li>\n<li>equation : bool, optional, ff True, fits and displays a linear regression equation. </li>\n<li>output_dir : str, optional, Directory path to save the output figure. If not provided, the figure is saved in the current working directory.</li>\n<li>filename : str, optional, Filename (with extension) for saving the figure. If not provided, the plot is saved as \"output_scatter.png\".</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>None, displays the plot and optionally saves it to a file.</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">plot_scatter</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"n\">ds_road</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">variable1</span><span class=\"o\">=</span><span class=\"s2\">&quot;roads_gross&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">variable2</span><span class=\"o\">=</span><span class=\"s2\">&quot;buildings_gross&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">dataset2</span><span class=\"o\">=</span><span class=\"n\">ds_build</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;blue&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"n\">plot_title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Building vs Road&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">remove_outliers</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">log_transform_1</span><span class=\"o\">=</span><span class=\"s2\">&quot;log10&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">log_transform_2</span><span class=\"o\">=</span><span class=\"s2\">&quot;log10&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataset</span>,</span><span class=\"param\">\t<span class=\"n\">variable1</span>,</span><span class=\"param\">\t<span class=\"n\">variable2</span>,</span><span class=\"param\">\t<span class=\"n\">dataset2</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;blue&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">x_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">plot_title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">remove_outliers</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">log_transform_1</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">log_transform_2</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">equation</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">output_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.plot_time_series", "modulename": "sesame.sesametoolbox", "qualname": "plot_time_series", "kind": "function", "doc": "<p>Create a line plot and/or area plot for a time series data variable.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>dataset : xarray.Dataset or str, xarray dataset or a path to a NetCDF file. If a file path is provided, it will be automatically loaded into an xarray.Dataset.</li>\n<li>variable: str, the name of the variable to plot.</li>\n<li>agg_function: str, the operation to apply ('sum', 'mean', 'max', 'std').</li>\n<li>plot_type: str, optional, the type of plot ('line', 'area', 'both'). Default is 'both'.</li>\n<li>color: str, optional, the color of the plot. Default is 'blue'.</li>\n<li>plot_label: str, optional, the label for the plot. Default is 'Area Plot'.</li>\n<li>x_label: str, optional, the label for the x-axis. Default is 'Year'.</li>\n<li>y_label: str, optional, the label for the y-axis. Default is 'Value'.</li>\n<li>plot_title: str, optional, the title of the plot. Default is 'Time Series Plot'.</li>\n<li>smoothing_window: int, optional, the window size for rolling mean smoothing.</li>\n<li>output_dir : str, optional, Directory path to save the output figure. If not provided, the figure is saved in the current working directory.</li>\n<li>filename : str, optional, Filename (with extension) for saving the figure. If not provided, the plot is saved as \"output_time_series.png\".</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>None, displays the plot and optionally saves it to a file.</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">plot_time_series</span><span class=\"p\">(</span><span class=\"n\">variable</span><span class=\"o\">=</span><span class=\"s2\">&quot;buildings_gross&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>               <span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"n\">ds_build</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>               <span class=\"n\">agg_function</span><span class=\"o\">=</span><span class=\"s1\">&#39;sum&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>               <span class=\"n\">plot_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;both&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>               <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;blue&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>               <span class=\"n\">x_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Year&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>               <span class=\"n\">y_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Value&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>               <span class=\"n\">plot_title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Time Series Plot&#39;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataset</span>,</span><span class=\"param\">\t<span class=\"n\">variable</span>,</span><span class=\"param\">\t<span class=\"n\">agg_function</span><span class=\"o\">=</span><span class=\"s1\">&#39;sum&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">plot_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;both&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;blue&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">plot_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Area Plot&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">x_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Year&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">y_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Value&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">plot_title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Time Series Plot&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">smoothing_window</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.plot_hexbin", "modulename": "sesame.sesametoolbox", "qualname": "plot_hexbin", "kind": "function", "doc": "<p>Create a hexbin plot for two variables in an xarray dataset.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>dataset : xarray.Dataset or str, the primary dataset or a path to a NetCDF file. This dataset must contain the variable specified by <code>variable1</code>, which will be used for the x-axis.</li>\n<li>variable1 : str, name of the variable to be plotted on the x-axis. Must be present in <code>dataset</code>.</li>\n<li>variable2 : str, name of the variable to be plotted on the y-axis. If <code>dataset2</code> is provided, this variable will be extracted from <code>dataset2</code>; otherwise, it must exist in <code>dataset</code>.</li>\n<li>dataset2 : xarray.Dataset or str, optional, a second dataset or a path to a NetCDF file containing the variable specified by <code>variable2</code> (for the y-axis). If not provided, <code>dataset</code> will be used for both variables.</li>\n<li>time: str, optional, the time slice to plot.</li>\n<li>color: str, optional, the color map of the hexbin plot.</li>\n<li>grid_size: int, optional, the number of hexagons in the x-direction.</li>\n<li>x_label: str, optional, the label for the x-axis.</li>\n<li>y_label: str, optional, the label for the y-axis.</li>\n<li>plot_title: str, optional, the title for the plot.</li>\n<li>remove_outliers: bool, optional, whether to remove outliers from the data.</li>\n<li>log_transform_1: str, optional, the type of log transformation for variable1 ('log10', 'log', 'log2').</li>\n<li>log_transform_2: str, optional, the type of log transformation for variable2 ('log10', 'log', 'log2').</li>\n<li>output_dir : str, optional, Directory path to save the output figure. If not provided, the figure is saved in the current working directory.</li>\n<li>filename : str, optional, Filename (with extension) for saving the figure. If not provided, the plot is saved as \"output_hexbin.png\".</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>None, displays the map and optionally saves it to a file.</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">plot_hexbin</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"n\">ds_road</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">variable1</span><span class=\"o\">=</span><span class=\"s2\">&quot;roads_gross&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">variable2</span><span class=\"o\">=</span><span class=\"s2\">&quot;buildings_gross&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">dataset2</span><span class=\"o\">=</span><span class=\"n\">ds_build</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;blue&#39;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">plot_title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Building vs Road&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataset</span>,</span><span class=\"param\">\t<span class=\"n\">variable1</span>,</span><span class=\"param\">\t<span class=\"n\">variable2</span>,</span><span class=\"param\">\t<span class=\"n\">dataset2</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;pink_r&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">grid_size</span><span class=\"o\">=</span><span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">x_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y_label</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">plot_title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">remove_outliers</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">log_transform_1</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">log_transform_2</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.plot_map", "modulename": "sesame.sesametoolbox", "qualname": "plot_map", "kind": "function", "doc": "<p>Plots a 2D map of a variable from an xarray Dataset or NetCDF file with customizable colorbar, projection, and map appearance.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li>dataset : xarray.Dataset. or str. xarray dataset or a path to a NetCDF file. If a file path is provided, it will be automatically loaded into an xarray.Dataset.</li>\n<li>variable : str. Name of the variable in the xarray Dataset to plot.</li>\n<li>color : str, default 'hot_r'. Matplotlib colormap name for the plot (discrete color scale).</li>\n<li>title : str, default ''. Title of the map.</li>\n<li>label : str, default ''. Label for the colorbar.</li>\n<li>time: str, optional, the time slice to plot.</li>\n<li>vmin : float, optional. Minimum data value for the colorbar range. If not provided, the minimum of the variable is used.</li>\n<li>vmax : float, optional. Maximum data value for the colorbar range. If not provided, the maximum of the variable is used.</li>\n<li>extend_min : bool, default False. If True, includes values below <code>vmin</code> in the first color class and shows a left arrow on the colorbar.</li>\n<li>extend_max : bool, default False. If True, includes values above <code>vmax</code> in the last color class and shows a right arrow on the colorbar.</li>\n<li>levels : int or list of float, default 10. Either the number of color intervals or a list of explicit interval boundaries.</li>\n<li>out_bound : bool, default True. Whether to display the outer boundary (spine) of the map projection.</li>\n<li>remove_ata : bool, default False. If True, removes Antarctica from the map by excluding data below 60\u00b0S latitude.</li>\n<li>output_dir : str, optional. Directory path to save the output figure. If not provided, the figure is saved in the current working directory.</li>\n<li>filename : str, optional. Filename (with extension) for saving the figure. If not provided, the plot is saved as \"output_plot.png\".</li>\n<li>show : bool, True. Whether or not show the map</li>\n</ul>\n\n<h2 id=\"notes\">Notes</h2>\n\n<ul>\n<li>If both <code>extend_min</code> and <code>extend_max</code> are False, the dataset is clipped strictly within [vmin, vmax].</li>\n<li>The colorbar will use arrows to indicate out-of-bound values only if <code>extend_min</code> or <code>extend_max</code> is True.</li>\n<li>Tick formatting on the colorbar is:\n<ul>\n<li>Two decimal places if (vmax - vmin) &lt;= 10.</li>\n</ul></li>\n<li>If <code>remove_ata</code> is True, the colorbar is placed slightly higher to avoid overlap with the map.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>Axes class of the map, optionally displays the map and saves it to a file.</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">plot_map</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">isel</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">variable</span><span class=\"o\">=</span><span class=\"s1\">&#39;npp&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mi\">1200</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">extend_max</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;Greens&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">levels</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">remove_ata</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Net Primary Productivity&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;gC/m\u00b2/year&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;npp_map.png&#39;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataset</span>,</span><span class=\"param\">\t<span class=\"n\">variable</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;hot_r&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extend_min</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">extend_max</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">levels</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">out_bound</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">remove_ata</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">output_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.plot_country", "modulename": "sesame.sesametoolbox", "qualname": "plot_country", "kind": "function", "doc": "<p>Plots a choropleth map of countries using a specified data column and a world shapefile.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<ul>\n<li>tabular_data : pandas.DataFrame or str. Input table containing country-level data. Can be either:\n<ul>\n<li>A pandas DataFrame with the required <code>column</code></li>\n<li>A string path to a CSV file, which will be automatically read into a DataFrame</li>\n</ul></li>\n<li>column : str. Name of the column in the dataframe to visualize.</li>\n<li>title : str, optional. Title of the map. Default is an empty string.</li>\n<li>label : str, optional. Label for the colorbar. Default is an empty string.</li>\n<li>color : str, optional. Name of the matplotlib colormap to use. Default is 'viridis'.</li>\n<li>levels : int or list of float, optional. Number of color levels (if int) or list of bin edges (if list). Default is 10.</li>\n<li>remove_ata : bool, optional. Whether to remove Antarctica ('ATA') from the data. Default is False.</li>\n<li>out_bound : bool, optional. Whether to display map boundaries (spines). Default is True.</li>\n<li>vmin : float or None, optional. Minimum value for the colormap. If None, calculated from the data.</li>\n<li>vmax : float or None, optional. Maximum value for the colormap. If None, calculated from the data.</li>\n<li>extend_min : bool, optional. Whether to extend the colorbar below <code>vmin</code>. Default is False.</li>\n<li>extend_max : bool, optional. Whether to extend the colorbar above <code>vmax</code>. Default is False.</li>\n<li>output_dir : str, optional. Directory path to save the output figure. If not provided, the figure is saved in the current working directory.</li>\n<li>filename : str, optional. Filename (with extension) for saving the figure. If not provided, the plot is saved as \"output_country_plot.png\".</li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li>None, displays the map and optionally saves it to a file.</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">plot_country</span><span class=\"p\">(</span><span class=\"n\">tabular_data</span><span class=\"o\">=</span><span class=\"s2\">&quot;country_data.csv&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s2\">&quot;population&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Population of Countries&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">&quot;Population&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>            <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;viridis&#39;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tabular_data</span>,</span><span class=\"param\">\t<span class=\"n\">column</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;viridis&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">levels</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">output_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">remove_ata</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">out_bound</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extend_min</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">extend_max</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.sum_variables", "modulename": "sesame.sesametoolbox", "qualname": "sum_variables", "kind": "function", "doc": "<p>Sum specified variables in the xarray dataset. If no variables are specified, sum all variables\nexcept those starting with 'grid_area'. Fill NaNs with zero before summing, and convert resulting\nzeros back to NaNs.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<ul>\n<li>dataset: xarray.Dataset. or str, xarray dataset or a path to a NetCDF file. If a file path is provided, it will be automatically loaded into an xarray.Dataset.</li>\n<li>variables: list of str, the names of the variables to sum. If None, sum all variables except those starting with 'grid_area' and 'land_frac'.</li>\n<li>new_variable_name: str, optional, the name of the new variable to store the sum.</li>\n<li>time: optional, a specific time slice to select from the dataset.</li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li>xarray.Dataset. with the summed variable.</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sum_variables</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"n\">ds</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>             <span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;roads_gross&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;buildings_gross&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>             <span class=\"n\">new_variable_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;gross_mass&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">new_variable_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.subtract_variables", "modulename": "sesame.sesametoolbox", "qualname": "subtract_variables", "kind": "function", "doc": "<p>Subtract one variable from another in the xarray dataset.\nFill NaNs with zero before subtracting, and convert resulting zeros back to NaNs.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<ul>\n<li>dataset: xarray.Dataset. or str, xarray dataset or a path to a NetCDF file. If a file path is provided, it will be automatically loaded into an xarray.Dataset.</li>\n<li>variable1: str, the name of the variable to subtract from.</li>\n<li>variable2: str, the name of the variable to subtract.</li>\n<li>new_variable_name: str, optional, the name of the new variable to store the result.</li>\n<li>time: optional, a specific time slice to select from the dataset.</li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li>xarray.Dataset. with the resulting variable.</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subtract_variables</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"n\">ds</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">variable1</span><span class=\"o\">=</span><span class=\"s2\">&quot;precipitation&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                  <span class=\"n\">variable2</span><span class=\"o\">=</span><span class=\"s2\">&quot;evaporation&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                  <span class=\"n\">new_variable_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;net_water_gain&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">variable1</span>, </span><span class=\"param\"><span class=\"n\">variable2</span>, </span><span class=\"param\"><span class=\"n\">new_variable_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.divide_variables", "modulename": "sesame.sesametoolbox", "qualname": "divide_variables", "kind": "function", "doc": "<p>Divide one variable by another in the xarray dataset.\nFill NaNs with zero before dividing, and convert resulting zeros back to NaNs.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<ul>\n<li>dataset: xarray.Dataset. or str, xarray dataset or a path to a NetCDF file. If a file path is provided, it will be automatically loaded into an xarray.Dataset.    </li>\n<li>variable1: str, the name of the variable to be divided (numerator).</li>\n<li>variable2: str, the name of the variable to divide by (denominator).</li>\n<li>new_variable_name: str, optional, the name of the new variable to store the result.</li>\n<li>time: optional, a specific time slice to select from the dataset.</li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li>xarray.Dataset. with the resulting variable.</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">divide_variables</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"n\">ds</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                 <span class=\"n\">variable1</span><span class=\"o\">=</span><span class=\"s2\">&quot;road_length&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                 <span class=\"n\">variable2</span><span class=\"o\">=</span><span class=\"s2\">&quot;grid_area&quot;</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                 <span class=\"n\">new_variable_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;road_density&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">variable1</span>, </span><span class=\"param\"><span class=\"n\">variable2</span>, </span><span class=\"param\"><span class=\"n\">new_variable_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.multiply_variables", "modulename": "sesame.sesametoolbox", "qualname": "multiply_variables", "kind": "function", "doc": "<p>Multiply specified variables in the xarray dataset. If no variables are specified, multiply all variables.\nFill NaNs with one before multiplying, and convert resulting ones back to NaNs.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<ul>\n<li>dataset: xarray.Dataset. or str, xarray dataset or a path to a NetCDF file. If a file path is provided, it will be automatically loaded into an xarray.Dataset.</li>\n<li>variables: list of str, the names of the variables to multiply. If None, multiply all variables, excluding the \"grid_area\" and \"land_frac\" variables included in the dataset.</li>\n<li>new_variable_name: str, optional, the name of the new variable to store the product.</li>\n<li>time: optional, a specific time slice to select from the dataset.</li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li>xarray.Dataset. with the resulting variable.</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">multiply_variables</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"n\">ds</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;crop_area&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;yield_per_hectare&quot;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>    <span class=\"n\">new_variable_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;total_crop_yield&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">new_variable_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.average_variables", "modulename": "sesame.sesametoolbox", "qualname": "average_variables", "kind": "function", "doc": "<p>Average specified variables in the xarray dataset. If no variables are specified, average all variables\nexcept those starting with 'grid_area'. Fill NaNs with zero before averaging, and convert resulting\nzeros back to NaNs.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<ul>\n<li>dataset: xarray.Dataset. or str, xarray dataset or a path to a NetCDF file. If a file path is provided, it will be automatically loaded into an xarray.Dataset.</li>\n<li>variables: list of str, the names of the variables to average. If None, average all variables except those starting with 'grid_area' and 'land_frac'.</li>\n<li>new_variable_name: str, optional, the name of the new variable to store the average.</li>\n<li>time: optional, a specific time slice to select from the dataset.</li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li>xarray.Dataset. with the averaged variable.</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">average_variables</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"n\">ds</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                 <span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;roads_gross&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;buildings_gross&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                 <span class=\"n\">new_variable_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;average_gross&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">new_variable_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.get_netcdf_info", "modulename": "sesame.sesametoolbox", "qualname": "get_netcdf_info", "kind": "function", "doc": "<p>Extract information about variables and dimensions from a NetCDF dataset.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li>netcdf_file : xarray.Dataset or str. xarray dataset or a path to a NetCDF file. If a file path is provided, it will be automatically loaded into an xarray.Dataset.</li>\n<li>variable_name : str, optional. The prefix or complete name of the variable to filter. If not provided, all variables are included.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li>tuple, A tuple containing lists of dimensions, short names, long names, units, &amp; time values (if 'time' exists).</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_netcdf_info</span><span class=\"p\">(</span><span class=\"n\">netcdf_file</span><span class=\"o\">=</span><span class=\"n\">netcdf_file_path</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                <span class=\"n\">variable_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;railway_length&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">netcdf_file</span>, </span><span class=\"param\"><span class=\"n\">variable_name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.atlas", "modulename": "sesame.sesametoolbox", "qualname": "atlas", "kind": "function", "doc": "<p>List all NetCDF files in a directory and count the number of variables in each.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>directory : str. Path to the directory containing NetCDF files.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>pd.DataFrame. A DataFrame with file names and the number of variables in each file.</p>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atlas</span><span class=\"p\">(</span><span class=\"n\">directory</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "sesame.sesametoolbox.info", "modulename": "sesame.sesametoolbox", "qualname": "info", "kind": "function", "doc": "<p>Extract metadata for each variable in a NetCDF dataset.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li>data : str, os.PathLike, or xarray.Dataset. Path to a NetCDF file or an xarray.Dataset object.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li>pd.DataFrame. A DataFrame containing variable names, long names, units, sources, time range (start and end), time resolution (step), and depth values (if present as a variable).</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">netcdf_path</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();